{
  "version": "1.1.1",
  "name": "email-addresses",
  "description": "An email address parser based on rfc5322",
  "keywords": [
    "email address",
    "parser",
    "rfc5322",
    "5322"
  ],
  "homepage": "https://github.com/FogCreek/email-addresses",
  "author": {
    "name": "Jack Bowman",
    "email": "johnrbowman@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/FogCreek/email-addresses.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/email-addresses.js",
  "devDependencies": {
    "libxmljs": "~0.8.0",
    "tap": "~0.4.0"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "license": "MIT",
  "readme": "email-addresses.js\n==================\n\nAn RFC 5322 email address parser.\n\nv 1.1.1\n\nWhat?\n-----\nWant to see if something could be an email address? Want to grab the display name or just the address out of a string? Put your regexes down and use this parser!\n\nThis library does not validate email addresses - we can't really do that without sending an email. However, it attempts to parse addresses using the (fairly liberal) grammar specified in RFC 5322. You can use this to check if user input looks like an email address.\n\nWhy use this?\n-------------\nUse this library because you can be sure it really respects the RFC:\n - The functions in the recursive decent parser match up with the productions in the RFC\n - The productions from the RFC are written above each function for easy verification\n - Tests include all of the test cases from the [is_email](https://github.com/dominicsayers/isemail) project, which are extensive\n\nInstallation\n------------\nnpm install email-addresses\n\nExample\n-------\n\n```\n$ node\n> addrs = require(\"email-addresses\")\n{ [Function: parse5322]\n  parseOneAddress: [Function: parseOneAddressSimple],\n  parseAddressList: [Function: parseAddressListSimple] }\n> addrs.parseOneAddress('\"Jack Bowman\" <jack@fogcreek.com>')\n{ name: '\"Jack Bowman\"',\n  address: 'jack@fogcreek.com',\n  local: 'jack',\n  domain: 'fogcreek.com' }\n> addrs.parseAddressList('jack@fogcreek.com, Bob <bob@example.com>')\n[ { name: null,\n    address: 'jack@fogcreek.com',\n    local: 'jack',\n    domain: 'fogcreek.com' },\n  { name: 'Bob',\n    address: 'bob@example.com',\n    local: 'bob',\n    domain: 'example.com' } ]\n> addrs(\"jack@fogcreek.com\")\n{ ast:\n   { name: 'address-list',\n     tokens: 'jack@fogcreek.com',\n     semantic: 'jack@fogcreek.com',\n     children: [ [Object] ] },\n  addresses:\n   [ { node: [Object],\n       name: null,\n       address: 'jack@fogcreek.com',\n       local: 'jack',\n       domain: 'fogcreek.com' } ] }\n> addrs(\"bogus\")\nnull\n```\n\nReferences\n----------\n - http://tools.ietf.org/html/rfc5322\n - http://code.google.com/p/isemail/\n\nProps\n-----\nMany thanks to [Dominic Sayers](https://github.com/dominicsayers) and his documentation and tests\nfor the [is_email](https://github.com/dominicsayers/isemail) function which helped greatly in writing this parser.\n\nLicense\n-------\nLicensed under the MIT License. See the LICENSE file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/FogCreek/email-addresses/issues"
  },
  "_id": "email-addresses@1.1.1",
  "_shasum": "124db0c67503c5249ae4c9343e6d89b4815e4a06",
  "_from": "email-addresses@",
  "_resolved": "https://registry.npmjs.org/email-addresses/-/email-addresses-1.1.1.tgz"
}
