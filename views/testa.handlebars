<h2>File System For {{name}}</h2>

<table>
	<thead><tr>
		<th data-bind="visible: folders().length > 0">File Name</th><th>File Type</th>
	</tr></thead>
	<tbody data-bind="foreach: folders, visible: folders().length > 0">
		<tr>
			<td>
				<a href="#" data-bind="click: $root.select">
				<text data-bind="text: $data.file_name">
			</td>
			<td data-bind="text: $data.file_type"></td>
			<td><a href="#" data-bind = "click: $root.del">Delete</a></td>
			<td>
			<!-- stuff goes here -->
			</td>
		</tr>
	</tbody>
</table>

<text data-bind="visible: folders().length == 0">There doesn't appear to be anything here.</text>

<form data-bind="submit: newFolder, visible: reqNewFolder">
	<input data-bind = "value: newFolderName" placeholder="New folder name..."/>
	<button type="submit">Add Folder</button>
</form>

<form data-bind="submit: newFile, visible: reqNewFile">
	<input data-bind = "value: newFileName" placeholder="New file name..."/>
	<button type="submit">Add File</button>
</form>

<p>
	<button data-bind='click: list'>Refresh</button>
	<button data-bind='click: activateNewFolder'>New Folder</button>
	<button data-bind='click: activateNewFile'>New File</button>
</p>

<p></p>
<script>
	var fb = new Firebase('https://incandescent-fire-6697.firebaseio.com/');
	var fbtoken = '{{fbtoken}}';

	var root = "{{root}}";

	var useOnce = "test";

	fb.auth(fbtoken, function(error, result) {
		if(error) {
			console.log("Login failed", error);
		} else {
			console.log("Login success with payload:", result.auth);
		}
	});

	function ViewModel(fileRoot) {
		var self = this;

		// Data
		self.fileRoot = fileRoot; // kind of want to always keep this around

		self.newFileName = ko.observable();
		self.newFolderName = ko.observable();
		self.currentParentFolder = ko.observable(fileRoot);

		self.reqNewFolder = ko.observable(false);
		self.reqNewFile = ko.observable(false);

		self.folders = ko.observableArray([]);

		// Starup
		$.getJSON("/fs", {operation: 'flist', file_uuid: self.currentParentFolder}, function(data) {
			if (data.type == "success") self.folders(data.msg);
		});


		// Operating Behaviour
		self.activateNewFile = function() {
			self.reqNewFile(true);
		}
		self.activateNewFolder = function() {
			self.reqNewFolder(true);
		}

		self.list = function() {
			$.getJSON("/fs", { operation: 'flist', file_uuid: self.currentParentFolder }, function(data) {
				console.log(data);
				if (data.type == "success") self.folders(data.msg);
				console.log(data.msg);
			});
		}

		self.del = function(file) {
			$.getJSON("/fs", {
				operation: 'fdelete',
				file_uuid: file.file_uuid
			}, function(data) {
				if (data.type == "success" ) {
					console.log(data);
					self.list();
				}
			});
		}

		self.select = function(file) {
			if (file.file_type == 'folder') {
				self.currentParentFolder(file.file_uuid);
				self.list();
			}
			if (file.file_type == 'file') {
				// launch application
				$.getJSON("/fs", {
					operation: 'fopen',
					file_uuid: file.file_uuid
				}, function(data) {
					if (data.type == "success") {
						console.log("App file opened.");
					}
					// check if success, and if success, open in new tab
					// let filesystem flush data over to Firebase
					console.log(data);
				});
			}
		}

		self.newFolder = function() {
			$.getJSON("/fs", {
						operation: 'fnew',
						parent_uuid: self.currentParentFolder(),
						file_name: this.newFolderName(),
						file_type: "folder"
					}, function(data) {
						console.log(data);
						self.list();
					});
			self.newFolderName("");
			self.reqNewFolder(false);
		}

		self.newFile = function() {
			$.getJSON("/fs", {
						operation: 'fnew',
						parent_uuid: self.currentParentFolder(),
						file_name: this.newFileName(),
						file_type: "file"
					}, function(data) {
						console.log(data);
						self.list();
					});
			self.newFileName("");
			self.reqNewFile(false);
		}
	};

	ko.applyBindings(new ViewModel(root));
</script>

<a href="/about" target="_blank">Fortune cookie?</a>

<p>
	QuipData will be out of bounds.
	<a href="/contact">Contact page</a>
</p>